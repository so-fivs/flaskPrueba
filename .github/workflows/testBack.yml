name: Test and Deploy Backend

on:
  push:
    branches: [ "Backend" ]

jobs:
  TestAndDeploy:
    name: Test and Deploy to EC2 Backend
    runs-on: ubuntu-latest
    
    steps:
      # Paso 1: Checkout del código desde la rama Backend
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configuración del entorno Python
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: |
          pip install -r Backend/requirements.txt

      # Paso 4: Crear la base de datos temporal para las pruebas
      - name: Setup Test Database
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo service mysql start
          # Asegurar que MySQL está corriendo correctamente
          sudo mysqladmin ping
          # Crear la base de datos de prueba
          mysql -u root -e "CREATE DATABASE IF NOT EXISTS paginaParcialBigdata_test;"
          # Cargar el esquema (asegúrate de tener el archivo schema.sql en el repositorio)
          mysql -u root paginaParcialBigdata_test < ./Backend/tests/schema.sql

      # Paso 5: Ejecutar las pruebas unitarias desde el archivo .py
      - name: Run Unit Tests
        run: |
          pytest Backend/tests/test_backend.py --disable-warnings

      # Paso 6: Eliminar la base de datos temporal después de las pruebas
      - name: Teardown Test Database
        if: always()
        run: |
          mysql -u root -e "DROP DATABASE IF EXISTS paginaParcialBigdata_test;"

      # Paso 7: Desplegar en EC2 si las pruebas pasan
      - name: Deploy Backend to EC2 Instance
        if: success()
        env:
          EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SSH_HOST_BACK }}
          EC2_USER: ${{ secrets.USER_NAME }}
        run: |
          echo "$EC2_PRIVATE_KEY" > ec2_key && chmod 600 ec2_key
          ssh -o StrictHostKeyChecking=no -i ec2_key ${EC2_USER}@${SERVER_IP} '
              cd /home/ubuntu/flaskPrueba &&
              git fetch --all &&
              git reset --hard origin/master &&
              git pull origin master &&
              source /home/ubuntu/entornoGunicorn/bin/activate &&
              pip install -r requirements.txt &&
              fuser -k 5000/tcp || true &&
              gunicorn -b 0.0.0.0:5000 app:app --daemon
          '

name: TestAndDeployBackend

on:
  push:
    branches: [ "Backend" ]

jobs:
  TestAndDeploy:
    name: Test and Deploy to EC2 Backend
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the Backend branch
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # Create a temporary database for testing
      - name: Create Temporary Database
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
        run: |
          mysql -h $DB_HOST -u $DB_USERNAME -p$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS test_database;"
          mysql -h $DB_HOST -u $DB_USERNAME -p$DB_PASSWORD test_database < Backend/tests/schema.sql

      # Set PYTHONPATH and run unit tests
      - name: Run Unit Tests
        env:
          PYTHONPATH: ${{ github.workspace }}/Backend
        run: |
          cd Backend &&
          pytest tests/test_usuario.py --disable-warnings

      # Drop temporary database after tests
      - name: Drop Temporary Database
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
        run: |
          mysql -h $DB_HOST -u $DB_USERNAME -p$DB_PASSWORD -e "DROP DATABASE IF EXISTS test_database;"

      # Deploy Backend to EC2 Instance if tests pass
      - name: Deploy Backend to EC2 Instance
        if: success()  # Only deploy if tests pass
        env:
          EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SSH_HOST_BACK }}
          EC2_USER: ${{ secrets.USER_NAME }}
        run: |
          echo "$EC2_PRIVATE_KEY" > ec2_key && chmod 600 ec2_key
          ssh -o StrictHostKeyChecking=no -i ec2_key ${EC2_USER}@${SERVER_IP} '
              cd /home/ubuntu/flaskPrueba &&
              git fetch --all &&
              git switch Backend &&
              git reset --hard origin/Backend &&
              git pull origin Backend &&
              source /home/ubuntu/pruebaFlask/entornoBackend/bin/activate &&
              cd /home/ubuntu/flaskPreuba &&
              pip install -r requirements.txt &&
              fuser -k 5000/tcp || true &&
              tmux kill-session -t mysession || true &&  # Terminate existing session if exists
              tmux new-session -d -s mysession "gunicorn -w 4 -b 0.0.0.0:5000 Servidor:app > gunicorn.log 2>&1"
          '
